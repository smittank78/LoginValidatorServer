package api.loginvalidatorserver.service;

import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import api.loginvalidatorserver.convertor.DtoToEntityConvertor;
import api.loginvalidatorserver.dto.CustomerLogFileDto;
import api.loginvalidatorserver.dto.CustomerLogFileTrackingDto;
import api.loginvalidatorserver.entity.CustomerLogFile;
import api.loginvalidatorserver.entity.CustomerLogFileTracking;
import api.loginvalidatorserver.entity.FileTypes;
import api.loginvalidatorserver.entity.Sources;
import api.loginvalidatorserver.entity.Status;
import api.loginvalidatorserver.repo.CustomerLogFileRepository;
import api.loginvalidatorserver.repo.CustomerLogFileTrackingRepository;
import api.loginvalidatorserver.repo.FileTypeRepository;
import api.loginvalidatorserver.repo.SourcesRepository;
import api.loginvalidatorserver.repo.StatusRepository;

@Service
public class CustomerLofFileService 
{	
	@Autowired
	DtoToEntityConvertor convertor;

	@Autowired
	CustomerLogFileRepository customerLogFileRepository;
	
	@Autowired
	FileTypeRepository fileTypeRepository;
	
	@Autowired
	SourcesRepository sourcesRepository;
	
	@Autowired
	StatusRepository statusRepository;
	
	@Autowired
	CustomerLogFileTrackingRepository fileTrackingRepository;
	
	boolean flag;
	
	Logger logger = Logger.getLogger(CustomerLofFileService.class.getName());
	
	public int insertCustomerLogFile(CustomerLogFileDto dto) 
	{
		logger.info("inserting log file data in process ...........");
		CustomerLogFile customerLogFile = convertor.getCustomerLofFileEntity(dto);

		Optional<FileTypes> fileTypes = fileTypeRepository.findById(dto.getFileTypes().getFileTypeId()); //convertor.getFileTypeEntity(dto.getFileTypes());
		FileTypes types = fileTypes.get();
		
		Status status = statusRepository.findById(dto.getStatus().getStatusId()).get(); //convertor.getStatusEntity(dto.getStatus());
		
		Sources sources = sourcesRepository.findById(dto.getSources().getSourceId()).get(); //convertor.getSourceEntity(dto.getSources());
		logger.info("status : " + status);
		logger.info("sources : " + sources.toString());
		logger.info("types : " + types.toString());
		logger.info("loading...........");

		customerLogFile.setFileTypes(types);
		customerLogFile.setStatus(status);
		customerLogFile.setSources(sources);
		
		CustomerLogFile file = selectByDto(dto);
		if(file != null)
			customerLogFile.setId(file.getId());
		logger.info("customer log file from dto to entity converted... ");
	
		int autoGeneratedID = customerLogFileRepository.save(customerLogFile).getId();
		logger.info("customer log file data commited into db and generated id is " + autoGeneratedID);
		
		return autoGeneratedID;
	}
	public int insertCustomerFileTrackingLog(CustomerLogFileTrackingDto dto) 
	{
		logger.info("inserting tracking data process ...........");
		CustomerLogFileTracking customerLogFileTracking = convertor.getCustomerLofFileTrackingEntity(dto);

		int autoGeneratedID = fileTrackingRepository.save(customerLogFileTracking).getId();
		logger.info("file tracking data commited into db and generated id is " + autoGeneratedID);
		
		return autoGeneratedID;
	}

	public CustomerLogFile selectByID(int id)
	{
		Optional<CustomerLogFile> customerLogFile = customerLogFileRepository.findById(id);
		return customerLogFile.get();
	}

	public CustomerLogFile selectByDto(CustomerLogFileDto dto)
	{
		CustomerLogFile customerLogFile = customerLogFileRepository.findCustomer(dto.getFileName(),dto.getCaseNumber(),dto.getUploadedFileMessageDigest(),dto.getSubmitterName(),dto.getForwardedIP());
		return customerLogFile;
	}
	public boolean checkIfSameCaseAndFileMD5Exists(CustomerLogFileDto dto)
	{
		int count = customerLogFileRepository.findFileCountByUploadedFileMessageDigestAndCaseNumber(dto.getUploadedFileMessageDigest(),dto.getCaseNumber());
		logger.info("count of SameCaseAndFileMD5Exists : " + count);		
		if(count == 1)
		{
			return false;
		}
		else 
		{
			return true;
		}
	}
	public boolean checkIfSameCaseAndFileMD5ExistsAndInProcess(CustomerLogFileDto dto)
	{
		int count = customerLogFileRepository.findFileCountByFileName(dto.getFileName());
		logger.info("count of SameCaseAndFileMD5ExistsAndInProcess : " + count);		
		if(count == 1)
		{
			return false;
		}
		else 
		{
			return true;
		}
	}
}